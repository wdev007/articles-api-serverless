{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "ArticlesCreateLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/articles-dev-articlesCreate"
      }
    },
    "ArticlesGetAllLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/articles-dev-articlesGetAll"
      }
    },
    "ArticlesGetLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/articles-dev-articlesGet"
      }
    },
    "ArticlesUpdateLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/articles-dev-articlesUpdate"
      }
    },
    "ArticlesDeleteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/articles-dev-articlesDelete"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "articles",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/articles-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/articles-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/articles-*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "articles",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "ArticlesCreateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/articles/dev/1638502453800-2021-12-03T03:34:13.800Z/articles.zip"
        },
        "Handler": "src/index.create",
        "Runtime": "nodejs12.x",
        "FunctionName": "articles-dev-articlesCreate",
        "MemorySize": 128,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8000",
            "DYNAMODB_LOCAL_ACCESS_KEY_ID": "AKIARFHN5VK4LIPQ62GT",
            "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "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",
            "DYNAMODB_LOCAL_STAGE": "dev",
            "JWKS_URI": "",
            "AUDIENCE": "",
            "TOKEN_ISSUER": "",
            "TOKEN": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ArticlesCreateLogGroup"
      ]
    },
    "ArticlesGetAllLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/articles/dev/1638502453800-2021-12-03T03:34:13.800Z/articles.zip"
        },
        "Handler": "src/index.getAll",
        "Runtime": "nodejs12.x",
        "FunctionName": "articles-dev-articlesGetAll",
        "MemorySize": 128,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8000",
            "DYNAMODB_LOCAL_ACCESS_KEY_ID": "AKIARFHN5VK4LIPQ62GT",
            "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "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",
            "DYNAMODB_LOCAL_STAGE": "dev",
            "JWKS_URI": "",
            "AUDIENCE": "",
            "TOKEN_ISSUER": "",
            "TOKEN": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ArticlesGetAllLogGroup"
      ]
    },
    "ArticlesGetLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/articles/dev/1638502453800-2021-12-03T03:34:13.800Z/articles.zip"
        },
        "Handler": "src/index.get",
        "Runtime": "nodejs12.x",
        "FunctionName": "articles-dev-articlesGet",
        "MemorySize": 128,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8000",
            "DYNAMODB_LOCAL_ACCESS_KEY_ID": "AKIARFHN5VK4LIPQ62GT",
            "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "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",
            "DYNAMODB_LOCAL_STAGE": "dev",
            "JWKS_URI": "",
            "AUDIENCE": "",
            "TOKEN_ISSUER": "",
            "TOKEN": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ArticlesGetLogGroup"
      ]
    },
    "ArticlesUpdateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/articles/dev/1638502453800-2021-12-03T03:34:13.800Z/articles.zip"
        },
        "Handler": "src/index.update",
        "Runtime": "nodejs12.x",
        "FunctionName": "articles-dev-articlesUpdate",
        "MemorySize": 128,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8000",
            "DYNAMODB_LOCAL_ACCESS_KEY_ID": "AKIARFHN5VK4LIPQ62GT",
            "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "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",
            "DYNAMODB_LOCAL_STAGE": "dev",
            "JWKS_URI": "",
            "AUDIENCE": "",
            "TOKEN_ISSUER": "",
            "TOKEN": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ArticlesUpdateLogGroup"
      ]
    },
    "ArticlesDeleteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/articles/dev/1638502453800-2021-12-03T03:34:13.800Z/articles.zip"
        },
        "Handler": "src/index.exclude",
        "Runtime": "nodejs12.x",
        "FunctionName": "articles-dev-articlesDelete",
        "MemorySize": 128,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "DYNAMODB_LOCAL_ENDPOINT": "http://localhost:8000",
            "DYNAMODB_LOCAL_ACCESS_KEY_ID": "AKIARFHN5VK4LIPQ62GT",
            "DYNAMODB_LOCAL_SECRET_ACCESS_KEY": "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",
            "DYNAMODB_LOCAL_STAGE": "dev",
            "JWKS_URI": "",
            "AUDIENCE": "",
            "TOKEN_ISSUER": "",
            "TOKEN": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ArticlesDeleteLogGroup"
      ]
    },
    "ArticlesCreateLambdaVersion8GJByOaFvnKAicHOYX2mjSTGxgjcsawGeumGnuY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ArticlesCreateLambdaFunction"
        },
        "CodeSha256": "X9Lff89TeGWFQe6P4PsppO9v9UIBmnMOqOw5Uk2ztgo="
      }
    },
    "ArticlesGetAllLambdaVersionNaesM2XaNbmP7Prozcw03l0LCnHZngvu3fQ6i2o": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ArticlesGetAllLambdaFunction"
        },
        "CodeSha256": "X9Lff89TeGWFQe6P4PsppO9v9UIBmnMOqOw5Uk2ztgo="
      }
    },
    "ArticlesGetLambdaVersionhf5EWhHzCHePTRVjjYYJLY4vM4TnjSVc5ec5l0OHUY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ArticlesGetLambdaFunction"
        },
        "CodeSha256": "X9Lff89TeGWFQe6P4PsppO9v9UIBmnMOqOw5Uk2ztgo="
      }
    },
    "ArticlesUpdateLambdaVersion5aDm8y9Syo9aahNkBICVRAE4r4ZrR7nfjsVbzdMKY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ArticlesUpdateLambdaFunction"
        },
        "CodeSha256": "X9Lff89TeGWFQe6P4PsppO9v9UIBmnMOqOw5Uk2ztgo="
      }
    },
    "ArticlesDeleteLambdaVersion4wlUf27FDOpmlVyjHzPYa8enNt5unf132ia8cV0gNE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ArticlesDeleteLambdaFunction"
        },
        "CodeSha256": "X9Lff89TeGWFQe6P4PsppO9v9UIBmnMOqOw5Uk2ztgo="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-articles",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceArticles": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "articles",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceArticlesIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceArticles"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodArticlesOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceArticles"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodArticlesIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PATCH,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceArticlesIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodArticlesPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceArticles"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ArticlesCreateLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ArticlesCreateLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodArticlesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceArticles"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ArticlesGetAllLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ArticlesGetAllLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodArticlesIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceArticlesIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ArticlesGetLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ArticlesGetLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodArticlesIdVarPatch": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PATCH",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceArticlesIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ArticlesUpdateLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ArticlesUpdateLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodArticlesIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceArticlesIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ArticlesDeleteLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ArticlesDeleteLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1638502414568": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodArticlesOptions",
        "ApiGatewayMethodArticlesIdVarOptions",
        "ApiGatewayMethodArticlesPost",
        "ApiGatewayMethodArticlesGet",
        "ApiGatewayMethodArticlesIdVarGet",
        "ApiGatewayMethodArticlesIdVarPatch",
        "ApiGatewayMethodArticlesIdVarDelete"
      ]
    },
    "ArticlesCreateLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ArticlesCreateLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ArticlesGetAllLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ArticlesGetAllLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ArticlesGetLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ArticlesGetLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ArticlesUpdateLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ArticlesUpdateLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ArticlesDeleteLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ArticlesDeleteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "articlesTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "articles-table",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-articles-dev-ServerlessDeploymentBucketName"
      }
    },
    "ArticlesCreateLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ArticlesCreateLambdaVersion8GJByOaFvnKAicHOYX2mjSTGxgjcsawGeumGnuY"
      },
      "Export": {
        "Name": "sls-articles-dev-ArticlesCreateLambdaFunctionQualifiedArn"
      }
    },
    "ArticlesGetAllLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ArticlesGetAllLambdaVersionNaesM2XaNbmP7Prozcw03l0LCnHZngvu3fQ6i2o"
      },
      "Export": {
        "Name": "sls-articles-dev-ArticlesGetAllLambdaFunctionQualifiedArn"
      }
    },
    "ArticlesGetLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ArticlesGetLambdaVersionhf5EWhHzCHePTRVjjYYJLY4vM4TnjSVc5ec5l0OHUY"
      },
      "Export": {
        "Name": "sls-articles-dev-ArticlesGetLambdaFunctionQualifiedArn"
      }
    },
    "ArticlesUpdateLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ArticlesUpdateLambdaVersion5aDm8y9Syo9aahNkBICVRAE4r4ZrR7nfjsVbzdMKY"
      },
      "Export": {
        "Name": "sls-articles-dev-ArticlesUpdateLambdaFunctionQualifiedArn"
      }
    },
    "ArticlesDeleteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ArticlesDeleteLambdaVersion4wlUf27FDOpmlVyjHzPYa8enNt5unf132ia8cV0gNE"
      },
      "Export": {
        "Name": "sls-articles-dev-ArticlesDeleteLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-articles-dev-ServiceEndpoint"
      }
    }
  }
}